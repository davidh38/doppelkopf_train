#+TITLE: Doppelkopf Game Data Flow
#+AUTHOR: 
#+DATE: 2025-03-11

* Game Data Flow

This document describes the data flow in the Doppelkopf game application, including the API routes, WebSocket events, and the sequence of interactions between the frontend and backend.

** Game Flow Sequence

The game follows these steps in order, with the corresponding API routes:

1. *Start a New Game*: Click the "New Game" button to create a new game session
   - API Route: =/new_game= (POST)
   - Creates a new game instance with a unique ID
   - Initializes the game state with default values
   - Returns the game ID to the client

2. *Select a Game Variant*: Choose from Normal, Hochzeit (Marriage), Queen Solo, Jack Solo, or Fleshless
   - API Route: =/set_variant= (POST)
   - Parameters: game_id, variant, player_idx
   - Sets the chosen variant for the specified player
   - When all players have chosen, determines the final game variant based on priority
   - Transitions the game from variant selection phase to card play phase

3. *Play Cards*: Take turns playing cards by clicking on them when it's your turn
   - API Route: =/play_card= (POST)
   - Parameters: game_id, card_id
   - Validates if the move is legal
   - Updates the game state with the played card
   - Handles trick completion if all players have played a card
   - Triggers AI players to take their turns

4. *Make Announcements (Optional)*: 
   - If you're on the Re team (have Queens of Clubs), you can announce "Re"
   - If you're on the Kontra team (no Queens of Clubs), you can announce "Contra"
   - If you have both Queens of Clubs, you can announce "Hochzeit" (Marriage)
   - Announcements must be made before the fifth card is played
   - API Route: =/announce= (POST)
   - Parameters: game_id, announcement
   - Validates if the announcement is legal
   - Updates the game state with the announcement

5. *Complete Tricks*: The highest card in each trick wins and collects points
   - Current trick info: =/get_current_trick= (GET)
   - Last trick info: =/get_last_trick= (GET)
   - When a trick is completed, points are calculated and added to the winner's team score
   - Special rules like Doppelkopf bonus and Diamond Ace capture are applied

6. *Game Ends*: After all cards are played, the team with more points wins
   - Scoreboard: =/get_scoreboard= (GET)
   - When all cards have been played, final scores are calculated
   - The winner is determined (Re team needs at least 121 points to win)
   - Game points are awarded to players based on the outcome

7. *View Summary*: See the final score and game statistics
   - API Route: =/game-summary/<game_id>= (GET)
   - Displays detailed information about the game outcome
   - Shows points earned, special achievements, and game points awarded

** WebSocket Events

Socket.IO provides real-time updates during gameplay, showing AI player moves and trick completions automatically. The main WebSocket events include:

1. *game_update*: Sent when the game state changes
   - Contains the complete game state for the client to render
   - Includes information about current player, hands, tricks, scores, etc.

2. *ai_selecting_variant*: Sent when an AI player is selecting a game variant
   - Parameters: player, variant
   - Used to show the variant selection animation for AI players

3. *ai_playing_card*: Sent when an AI player plays a card
   - Parameters: player, card
   - Used to show the card playing animation for AI players

4. *trick_completed*: Sent when a trick is completed
   - Parameters: winner, points, cards
   - Used to show the trick completion animation and update scores

5. *game_over*: Sent when the game ends
   - Parameters: winner, scores, summary
   - Used to show the game over screen with final results

** Data Flow Diagram

The data flow between components follows this general pattern:

1. User Interface (Frontend)
   - Renders the game state
   - Captures user inputs (card selection, variant choice, announcements)
   - Sends requests to the backend via API calls or WebSocket events

2. Backend Server
   - Processes requests from the frontend
   - Validates game rules and legal moves
   - Updates the game state
   - Manages AI player decisions
   - Sends updates to connected clients via WebSocket

3. Game Logic
   - Implements the rules of Doppelkopf
   - Determines legal actions
   - Calculates scores and determines winners
   - Handles special rules and variants

4. AI Logic
   - Makes decisions for AI players
   - Selects game variants
   - Chooses cards to play
   - Makes announcements based on hand strength and game state

** General Data Flow Example

This example illustrates the complete flow from when a user first accesses the website to starting and playing a game:

1. *Initial Page Load*
   - User navigates to the main route (e.g., http://localhost:5007)
   - Server receives the request and serves the index.html template
   - Browser loads HTML, CSS, and JavaScript files
   - JavaScript initializes the game interface and establishes a WebSocket connection

2. *Starting a New Game*
   - User clicks the "New Game" button on the interface
   - JavaScript code captures this event and sends a request to the =/new_game= endpoint
   - Backend creates a new game instance with a unique ID:
     - Initializes the game state
     - Creates the deck and deals cards
     - Determines initial teams based on Queens of Clubs
     - Sets up AI agents for non-human players
   - Backend returns the game ID and initial state to the client
   - JavaScript receives the response and updates the UI to show:
     - Player's hand
     - Game variant selection options
     - Other players' positions

3. *Variant Selection Phase*
   - If it's the player's turn to choose a variant:
     - UI displays variant options
     - Player selects a variant
     - JavaScript sends the selection to the =/set_variant= endpoint
     - Backend updates the game state with the player's choice
   - If it's an AI player's turn:
     - Backend determines the AI's variant choice
     - WebSocket sends an =ai_selecting_variant= event to the client
     - JavaScript animates the AI's selection
   - This continues until all players have chosen
   - Backend determines the final game variant based on priority
   - WebSocket sends a =game_update= event with the updated state
   - JavaScript updates the UI to show the final variant and transition to the card play phase

4. *Card Play Phase*
   - If it's the player's turn:
     - UI highlights legal cards that can be played
     - Player clicks a card
     - JavaScript sends the selection to the =/play_card= endpoint
     - Backend validates the move and updates the game state
   - If it's an AI player's turn:
     - Backend determines the AI's card choice
     - WebSocket sends an =ai_playing_card= event to the client
     - JavaScript animates the AI playing the card
   - When a trick is completed:
     - Backend calculates points and determines the winner
     - WebSocket sends a =trick_completed= event
     - JavaScript animates the trick completion and updates scores

5. *Announcements*
   - If the player can make an announcement:
     - UI displays announcement buttons (Re, Contra, etc.)
     - Player clicks an announcement button
     - JavaScript sends the announcement to the =/announce= endpoint
     - Backend validates and updates the game state
   - If an AI player makes an announcement:
     - Backend determines the AI's announcement
     - WebSocket sends an event to the client
     - JavaScript displays the announcement

6. *Game Completion*
   - When all cards have been played:
     - Backend calculates final scores and determines the winner
     - WebSocket sends a =game_over= event with the results
     - JavaScript displays the game summary screen
     - UI shows options to start a new game or view the scoreboard

** API Routes Reference

*** Game Management
- =/new_game= (POST): Create a new game
- =/join_game= (POST): Join an existing game
- =/get_game_state= (GET): Get the current state of a game
- =/get_scoreboard= (GET): Get the current scoreboard

*** Game Actions
- =/set_variant= (POST): Set a game variant
- =/play_card= (POST): Play a card
- =/announce= (POST): Make an announcement (Re, Contra, etc.)

*** Game Information
- =/get_current_trick= (GET): Get information about the current trick
- =/get_last_trick= (GET): Get information about the last completed trick
- =/game-summary/<game_id>= (GET): Get a summary of a completed game

** State Management

The game state is managed on the server and includes:

1. *Game Information*
   - Game ID
   - Current phase (variant selection, card play)
   - Current player
   - Game variant
   - Whether the game is over

2. *Player Information*
   - Hands (cards held by each player)
   - Teams (Re or Kontra)
   - Scores

3. *Trick Information*
   - Current trick (cards played so far)
   - Completed tricks
   - Trick winner
   - Trick points

4. *Announcement Information*
   - Re announced (yes/no)
   - Contra announced (yes/no)
   - Additional announcements (No 90, No 60, No 30, Black)

The state is updated after each action and sent to all connected clients to keep the UI in sync with the game state.

** Data Structures

The Doppelkopf game application uses several key data structures to manage the game state and flow:

*** Global Data Structures

**** `games` Dictionary
The main data structure that stores all active game instances:
- Key: Game ID (a unique hexadecimal string)
- Value: A dictionary containing:
  - `game`: The core game state dictionary
  - `ai_agents`: AI agents for non-human players
  - `last_trick`: Information about the last completed trick
  - `last_trick_players`: Players involved in the last trick
  - `last_trick_winner`: Player who won the last trick
  - `last_trick_points`: Points earned in the last trick
  - `re_announced`, `contra_announced`: Flags for announcements
  - `no90_announced`, `no60_announced`, `no30_announced`, `black_announced`: Flags for additional announcements
  - `re_announcement_card`, `contra_announcement_card`: Card count when announcements were made
  - `starting_player`: Player who started the game
  - `player_variants`: Dictionary mapping player indices to their chosen variants
  - `revealed_teams`: List of booleans indicating if a player's team has been revealed

**** `scoreboard` Dictionary
Tracks wins and player scores across multiple games:
- `player_wins`: Number of games won by the human player
- `ai_wins`: Number of games won by AI players
- `player_scores`: List of scores for all 4 players
- `last_starting_player`: Index of the player who started the last game
- `last_card_giver`: Index of the player who was the card giver in the last game

*** Game State Data Structures

**** Game State Dictionary
The core data structure representing a game's state:
- `num_players`: Number of players (always 4)
- `deck`: List of all cards in the deck
- `hands`: List of lists, where each inner list contains the cards in a player's hand
- `tricks`: List of completed tricks
- `current_trick`: List of cards in the current trick
- `current_player`: Index of the player whose turn it is
- `game_variant`: The current game variant (normal, hochzeit, queen solo, etc.)
- `scores`: List with two elements [RE team score, KONTRA team score]
- `player_scores`: List of individual player scores
- `teams`: List indicating which team each player belongs to (RE, KONTRA, or UNKNOWN)
- `trick_winner`: Index of the player who won the last trick
- `game_over`: Boolean indicating if the game is over
- `players_with_hochzeit`: Set of player indices who have both Queens of Clubs
- `card_giver`: Index of the player who dealt the cards
- `variant_selection_phase`: Boolean indicating if the game is in the variant selection phase
- `player_variant_choices`: List of variant choices made by each player
- `variant_priority`: Dictionary mapping variant names to priority values
- `re_announced`, `contra_announced`: Flags for announcements
- `can_announce`: Boolean indicating if announcements can still be made

**** Card Dictionary
Represents a playing card:
- `suit`: The suit of the card (CLUBS, SPADES, HEARTS, DIAMONDS)
- `rank`: The rank of the card (NINE, JACK, QUEEN, KING, TEN, ACE)
- `is_second`: Boolean indicating if this is the second copy of the card

When sending card information to the frontend, additional fields are added:
- `suit_name`: String name of the suit
- `rank_name`: String name of the rank
- `suit_emoji`: Emoji representation of the suit
- `rank_emoji`: Emoji representation of the rank
- `display`: Human-readable display string
- `id`: Unique identifier for the card

*** Frontend Data Structures

**** Game State for Frontend
A JSON-serializable version of the game state sent to the frontend:
- `current_player`: Index of the current player
- `is_player_turn`: Boolean indicating if it's the human player's turn
- `player_team`: String name of the human player's team
- `game_variant`: String name of the game variant
- `scores`: Team scores
- `player_scores`: Individual player scores
- `game_over`: Boolean indicating if the game is over
- `winner`: String name of the winning team
- `hand`: List of the human player's cards
- `legal_actions`: List of legal cards the human player can play
- `other_players`: List of dictionaries with information about AI players
- `revealed_teams`: List of booleans indicating if a player's team has been revealed
- `player_score`: The human player's score
- `last_trick_points`: Points earned in the last trick
- `last_trick_diamond_ace_bonus`: Bonus points from Diamond Ace captures
- `re_announced`, `contra_announced`: Flags for announcements
- `has_hochzeit`: Boolean indicating if the player has both Queens of Clubs
- `can_announce`: Boolean indicating if announcements can still be made
- `can_announce_re`, `can_announce_contra`: Booleans indicating if the player can make specific announcements
- `card_giver`: Index of the card giver
- `current_trick`: List of cards in the current trick
- `trick_players`: List of players involved in the current trick
- `last_trick`: List of cards in the last completed trick
- `trick_winner`: Index of the player who won the last trick

**** WebSocket Event Data
Data sent through WebSocket events:
- `game_update`: Contains the complete game state
- `ai_selecting_variant`: Contains player index and variant
- `ai_playing_card`: Contains player index and card
- `trick_completed`: Contains winner, points, and cards
- `game_over`: Contains winner, scores, and summary
